#ifndef GENERATOR_POINT_HPP
#define GENERATOR_POINT_HPP

#include <vector>
#include <cassert>
#include <stdexcept>

namespace lebedev {

using vec = std::vector<double>;

enum class OctahedralPointGeneration 
{
    points_6,
    points_12,
    points_8,
    points_24,
    points_24_axis,
    points_48
};

using OhPointGen = OctahedralPointGeneration;

/**
 * \brief Point and weight which is acted on by Octahedral symmetry group to 
 * generate sets of points in a particular Lebedev quadrature rule.
 *
 * Here is some more stuff, blah blah blah.
 */
class GeneratorPoint
{
public:

    /**
     * \brief Given point with coordinates (`a`, `b`, `c`) and a 
     * `generating_rule` which describes the action of the octahedral group
     * on this point, create a `GeneratorPoint` object which can be used to
     * generate a subset of Lebedev quadrature points.
     */
    GeneratorPoint (double a, 
                    double b, 
                    double c, 
                    double weight, 
                    OhPointGen generating_rule)
        : a(a), b(b), c(c), weight(weight), generating_rule(generating_rule)
    {}

    /**
     * \brief Generates quadrature points via action of the Octahedral symmetry
     * group and then appends points and weight to `x`, `y`, `z`, and `w` 
     * vectors.
     */
    void generate_quadrature_points(vec &x, vec &y, vec &z, vec &w) const;

private:
    /* \brief x-component of generating point */
    double a = 1.0;
    /* \brief y-component of generating point */
    double b = 0.0;
    /* \brief z-component of generating point */
    double c = 0.0;
    /* \brief quadrature weight of all quadrature points generated by this point */
    double weight = 0.1666666666666667;
    
    /* \brief rule which describes action of the octahedral group on this point */
    OhPointGen generating_rule = OhPointGen::points_6;
};

} // namespace lebedev

#endif
