#ifndef LEBEDEV_QUADRATURE
#define LEBEDEV_QUADRATURE

#include "octahedral_generator.hpp"
#include "quadrature_order.hpp"

#include <vector>
#include <array>
#include <cmath>
#include <stdexcept>

namespace lebedev {

using vec = std::vector<double>;
using OhPointGen = OctahedralPointGeneration;



/**
 * \brief Point and weight which is acted on by Octahedral symmetry group to 
 * generate sets of points in a particular Lebedev quadrature rule.
 *
 * Here is some more stuff, blah blah blah.
 */
class GeneratorPoint
{
public:

    /**
     * \brief Given point with coordinates (`a`, `b`, `c`) and a 
     * `generating_rule` which describes the action of the octahedral group
     * on this point, create a `GeneratorPoint` object which can be used to
     * generate a subset of Lebedev quadrature points.
     */
    GeneratorPoint (double a, 
                    double b, 
                    double c, 
                    double weight, 
                    OhPointGen generating_rule)
        : a(a), b(b), c(c), weight(weight), generating_rule(generating_rule)
    {}

    /**
     * \brief Generates quadrature points via action of the Octahedral symmetry
     * group and then appends points and weight to `x`, `y`, `z`, and `w` 
     * vectors.
     */
    void generate_quadrature_points(vec &x, vec &y, vec &z, vec &w) const
    {
        unsigned int n_points = 0;
        if (generating_rule == OhPointGen::points_6)
        {
            generate_oh_symmetric_points<OhPointGen::points_6> (a, b, c, x, y, z);
            n_points = 6;
        } else if (generating_rule == OhPointGen::points_12)
        {
            generate_oh_symmetric_points<OhPointGen::points_12> (a, b, c, x, y, z);
            n_points = 12;
        } else if (generating_rule == OhPointGen::points_8)
        {
            generate_oh_symmetric_points<OhPointGen::points_8> (a, b, c, x, y, z);
            n_points = 8;
        } else if (generating_rule == OhPointGen::points_24)
        {
            generate_oh_symmetric_points<OhPointGen::points_24> (a, b, c, x, y, z);
            n_points = 24;
        } else if (generating_rule == OhPointGen::points_24_axis)
        {
            generate_oh_symmetric_points<OhPointGen::points_24_axis> (a, b, c, x, y, z);
            n_points = 24;
        } else if (generating_rule == OhPointGen::points_48)
        {
            generate_oh_symmetric_points<OhPointGen::points_48> (a, b, c, x, y, z);
            n_points = 48;
        } else 
        {
            throw std::invalid_argument("Not a valid octahedral generating rule");
        }
        w.insert(w.end(), n_points, weight);
    }

private:
    /* \brief x-component of generating point */
    double a = 1.0;
    /* \brief y-component of generating point */
    double b = 0.0;
    /* \brief z-component of generating point */
    double c = 0.0;
    /* \brief quadrature weight of all quadrature points generated by this point */
    double weight = 0.1666666666666667;
    
    /* \brief rule which describes action of the octahedral group on this point */
    OhPointGen generating_rule = OhPointGen::points_6;
};



struct QuadraturePoints 
{
    vec x;
    vec y;
    vec z;
    vec weights;
};



inline QuadraturePoints
generate_quadrature_points(const std::vector<GeneratorPoint> &generator_points)
{
    QuadraturePoints quad_points;
    for (const auto& generator_point : generator_points)
        generator_point.generate_quadrature_points(quad_points.x, 
                                                   quad_points.y, 
                                                   quad_points.z,
                                                   quad_points.weights);

    return quad_points;
}



template <QuadratureOrder quad_order>
std::vector<GeneratorPoint> make_generator_points();



template <QuadratureOrder quad_order>
inline QuadraturePoints
generate_quadrature_points()
{
    auto generator_points = make_generator_points<quad_order>();
    return generate_quadrature_points(generator_points);
}



inline QuadraturePoints generate_quadrature_points(QuadratureOrder quad_order)
{
    QuadraturePoints quad_points;
    if (quad_order == QuadratureOrder::order_6   )
        quad_points = generate_quadrature_points<QuadratureOrder::order_6>();
    else if (quad_order == QuadratureOrder::order_14  )
        quad_points = generate_quadrature_points<QuadratureOrder::order_14>();
    else if (quad_order == QuadratureOrder::order_26  )
        quad_points = generate_quadrature_points<QuadratureOrder::order_26>();
    else if (quad_order == QuadratureOrder::order_38  )
        quad_points = generate_quadrature_points<QuadratureOrder::order_38>();
    else if (quad_order == QuadratureOrder::order_50  )
        quad_points = generate_quadrature_points<QuadratureOrder::order_50>();
    else if (quad_order == QuadratureOrder::order_74  )
        quad_points = generate_quadrature_points<QuadratureOrder::order_74>();
    else if (quad_order == QuadratureOrder::order_86  )
        quad_points = generate_quadrature_points<QuadratureOrder::order_86>();
    else if (quad_order == QuadratureOrder::order_110 ) 
        quad_points = generate_quadrature_points<QuadratureOrder::order_110>();
    else if (quad_order == QuadratureOrder::order_146 ) 
        quad_points = generate_quadrature_points<QuadratureOrder::order_146>();
    else if (quad_order == QuadratureOrder::order_170 ) 
        quad_points = generate_quadrature_points<QuadratureOrder::order_170>();
    else if (quad_order == QuadratureOrder::order_194 ) 
        quad_points = generate_quadrature_points<QuadratureOrder::order_194>();
    else if (quad_order == QuadratureOrder::order_230 ) 
        quad_points = generate_quadrature_points<QuadratureOrder::order_230>();
    else if (quad_order == QuadratureOrder::order_266 ) 
        quad_points = generate_quadrature_points<QuadratureOrder::order_266>();
    else if (quad_order == QuadratureOrder::order_302 ) 
        quad_points = generate_quadrature_points<QuadratureOrder::order_302>();
    else if (quad_order == QuadratureOrder::order_350 ) 
        quad_points = generate_quadrature_points<QuadratureOrder::order_350>();
    else if (quad_order == QuadratureOrder::order_434 ) 
        quad_points = generate_quadrature_points<QuadratureOrder::order_434>();
    else if (quad_order == QuadratureOrder::order_590 ) 
        quad_points = generate_quadrature_points<QuadratureOrder::order_590>();
    else if (quad_order == QuadratureOrder::order_770 ) 
        quad_points = generate_quadrature_points<QuadratureOrder::order_770>();
    else if (quad_order == QuadratureOrder::order_974 ) 
        quad_points = generate_quadrature_points<QuadratureOrder::order_974>();
    else if (quad_order == QuadratureOrder::order_1202) 
        quad_points = generate_quadrature_points<QuadratureOrder::order_1202>();
    else if (quad_order == QuadratureOrder::order_1454) 
        quad_points = generate_quadrature_points<QuadratureOrder::order_1454>();
    else if (quad_order == QuadratureOrder::order_1730) 
        quad_points = generate_quadrature_points<QuadratureOrder::order_1730>();
    else if (quad_order == QuadratureOrder::order_2030) 
        quad_points = generate_quadrature_points<QuadratureOrder::order_2030>();
    else if (quad_order == QuadratureOrder::order_2354) 
        quad_points = generate_quadrature_points<QuadratureOrder::order_2354>();
    else if (quad_order == QuadratureOrder::order_2702) 
        quad_points = generate_quadrature_points<QuadratureOrder::order_2702>();
    else if (quad_order == QuadratureOrder::order_3074) 
        quad_points = generate_quadrature_points<QuadratureOrder::order_3074>();
    else if (quad_order == QuadratureOrder::order_3470) 
        quad_points = generate_quadrature_points<QuadratureOrder::order_3470>();
    else if (quad_order == QuadratureOrder::order_3890) 
        quad_points = generate_quadrature_points<QuadratureOrder::order_3890>();
    else if (quad_order == QuadratureOrder::order_4334) 
        quad_points = generate_quadrature_points<QuadratureOrder::order_4334>();
    else if (quad_order == QuadratureOrder::order_4802) 
        quad_points = generate_quadrature_points<QuadratureOrder::order_4802>();
    else if (quad_order == QuadratureOrder::order_5294) 
        quad_points = generate_quadrature_points<QuadratureOrder::order_5294>();
    else if (quad_order == QuadratureOrder::order_5810) 
        quad_points = generate_quadrature_points<QuadratureOrder::order_5810>();
    else
        throw std::invalid_argument("Lebedev order not available");

    return quad_points;
}



#include "make_generator_points.inst"

} // namespace lebedev

#endif
